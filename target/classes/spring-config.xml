<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
          http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd"
       default-lazy-init="true">

    <context:property-placeholder location="classpath:config.properties"/>
	<!-- 启用注解 -->
	<context:annotation-config />    
    <!-- 扫描注解Bean -->
    <context:component-scan base-package="cn.cnyirui.**.service,cn.cnyirui.framework.dao.common,cn.cnyirui.framework.extension,cn.cnyirui.ims.dao,cn.cnyirui.ims.task">    
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- aop注解 -->
    <aop:aspectj-autoproxy/>

    <!-- 数据源 -->
    <!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${connection.url}"/>
        <property name="username" value="${connection.username}"/>
        <property name="password" value="${connection.password}"/>
    	          

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />
    </bean>

    <!-- jpa Entity Factory 配置 -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="cn.cnyirui.**.po.**"/>
        <property name="persistenceUnitName" value="${jpa.persistenceUnitName}"/>
        <property name="persistenceProvider">
            <bean class="org.hibernate.jpa.HibernatePersistenceProvider"/>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="${jpa.generateDdl}"/>
                <property name="database" value="${jpa.database}"/>
                <property name="databasePlatform" value="${jpa.databasePlatform}"/>
                <property name="showSql" value="${jpa.showSql}"/>
            </bean>
        </property>
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>
        <property name="jpaPropertyMap">
            <map>
                <!-- 只扫描class文件，不扫描hbm，默认两个都搜索 -->
                <entry key="hibernate.archive.autodetection" value="class"/>
                <!-- 不检查@NamedQuery -->
                <entry key="hibernate.query.startup_check" value="false"/>
				<!-- Hibernate里面输入true的时候，Hibernate会转化为0插入数据库，当你在Hibernate里面输入false的时候，Hibernate会转化为1插入数据库 -->
                <entry key="hibernate.query.substitutions" value="${hibernate.query.substitutions}"/>
                <entry key="hibernate.default_batch_fetch_size" value="${hibernate.default_batch_fetch_size}"/>
                <entry key="hibernate.max_fetch_depth" value="${hibernate.max_fetch_depth}"/>
                <entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}"/>
                <entry key="hibernate.bytecode.use_reflection_optimizer" value="${hibernate.bytecode.use_reflection_optimizer}"/>
                <entry key="hibernate.cache.use_second_level_cache" value="${hibernate.cache.use_second_level_cache}"/>
                <entry key="hibernate.cache.use_query_cache" value="${hibernate.cache.use_query_cache}"/>
                <entry key="hibernate.cache.region.factory_class" value="${hibernate.cache.region.factory_class}"/>
                <entry key="net.sf.ehcache.configurationResourceName" value="${net.sf.ehcache.configurationResourceName}"/> 
                <entry key="hibernate.cache.use_structured_entries" value="${hibernate.cache.use_structured_entries}"/>
				<entry key="hibernate.format_sql" value="${jpa.showSql}"/>
				<entry key="hibernate.default_schema" value="${connection.username}"/>
            </map>
        </property>
    </bean>

    <!--
        spring data jpa repository
        base-package:扫描的包
        repository-impl-postfix:仓库自定义实现类型的后缀  自动扫描并添加到接口的实现
        factory-class 仓库接口的实现工厂
    -->
    <jpa:repositories
   			base-class="cn.cnyirui.framework.dao.BaseDaoImpl" 
            base-package="cn.cnyirui.**.dao.**"
            repository-impl-postfix="Impl"                        
            entity-manager-factory-ref="entityManagerFactory"
            transaction-manager-ref="transactionManager">            
    </jpa:repositories>
    <!-- 实体类自动注入createdBy createdTime lastModifiedBy lastModifiedTime -->
    <bean id="sysUserAuditorAware" class="cn.cnyirui.framework.extension.spring.SysUserAuditorAware"/>
    <jpa:auditing auditor-aware-ref="sysUserAuditorAware"  modify-on-creation="false" />

    <!--事务管理器配置-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean> 
	<!-- 启用注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 类型转换及数据格式化 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" lazy-init="false">
    	<property name="converters">
    		<set>
    			<bean class="cn.cnyirui.framework.extension.spring.DateConverter"/>
    		</set>
    	</property>    
    </bean>

    <!-- 直接把id转换为entity 必须非lazy否则无法注册  -->
    <bean id="domainClassConverter" class="org.springframework.data.repository.support.DomainClassConverter" lazy-init="false">
        <constructor-arg ref="conversionService"/>
    </bean> 

       
    <!-- spring工具类 方便在非spring管理环境中获取bean -->
    <bean id="springUtils" class="cn.cnyirui.framework.utils.SpringUtils" lazy-init="false"/>    
    <bean id="currentUserUtils" class="cn.cnyirui.framework.utils.CurrentUserUtils" lazy-init="false"/>
	<import resource="spring-config-cache.xml"/>    	
	<import resource="spring-config-weixin.xml"/>
	<import resource="spring-config-shiro.xml"/> 
	<import resource="spring-config-ims.xml"/> 
	<import resource="spring-config-task.xml"/>    
	<!-- <cache:annotation-driven cache-manager="springCacheManager" />  -->
</beans>